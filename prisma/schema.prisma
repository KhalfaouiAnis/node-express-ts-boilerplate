generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  fullname    String       @unique
  email       String       @unique
  password    String
  role        UserRole     @default(STUDENT)
  avatar      String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  courses     Course[]     @relation("InstructorCourses") // As instructor
  enrollments Enrollment[]
  Review      Review[]

  @@map("users")
}

model Course {
  id           String   @id @default(cuid())
  title        String
  description  String
  instructorId String
  thumbnailUrl String?
  price        Decimal  @db.Decimal(12, 2) @default(0)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  instructor  User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  sections    Section[]
  enrollments Enrollment[]
  Review      Review[]

  @@map("courses")
}

model Review {
  id          String   @id @default(cuid())
  courseId    String
  userId      String
  title       String
  description String
  rating      Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("reviews")
}

model Section {
  id       String @id @default(cuid())
  courseId String
  title    String
  order    Int

  course Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videos Video[]

  @@unique([courseId, order])
  @@map("sections")
}

model Video {
  id              String   @id @default(cuid())
  sectionId       String
  title           String
  url             String
  durationSeconds Int
  order           Int
  created_at      DateTime @default(now())

  section  Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@unique([sectionId, order])
  @@map("videos")
}

model Enrollment {
  id         String           @id @default(cuid())
  userId     String
  courseId   String
  amountPaid Decimal?         @db.Decimal(12, 2)
  enrolledAt DateTime         @default(now())
  status     EnrollmentStatus @default(ACTIVE)

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id           String    @id @default(cuid())
  enrollmentId String
  videoId      String
  isCompleted  Boolean   @default(true)
  completedAt  DateTime?
  updated_at   DateTime  @updatedAt

  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  video      Video      @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, videoId])
  @@map("progress")
}

enum UserRole {
  ADMIN
  STUDENT
  INSTRUCTOR
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}
